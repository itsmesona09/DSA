1. Using hashmap
- Hashmap stores data in key - value pairs
- key will be of hashable data type (content cannot be changed)
- value need not be hashable
- here, key is the unique elements and the value is the number of occurrences of that element
- if the element is seen in a hashmap, we are going to increase the counter of that key which is the element by 1 for each iteration in a loop
- if the element is not seen ie a new element, we are going to add the element in to the hashmap with the value 1
- we have created a hashmap with key as unique elements in an array and value as the frequency of that element
- sort the hashmap items with the value, in reverse order
- initialize a array to store the k no of top frequently occurred elements
- using a for loop iterating through the hashmap items, append the key of the hashmap until the length of the array equals the give k value
- return the resultant array

TC => O(n + m logm)
O(n) - looping through the elements in an array, where n is the number of elements in an array
O(m logm) - sort the hashmap items by frequency, where m is the number of unique elements
O(m) - looping through the items in the hashmap, where m is the number of unique elements / key in hashmap

SC => O(m + k)
O(m) - storing the key, value pairs in a hashmap, where m is the number of key, value pairs
O(k) - storing the k no of elements in an array, k is the given size

----------------------------------------------------------------------

2. Using heap:
- Count the frequency of the elements of the array
- using (-freq, num) pair from hashmap, to add the elements in the heap
- use heapify from heapq, to create a max heap
- PYTHON'S DEFAULT IS MIN HEAP => so to convert min heap to max heap, we multiplied -1 to the frequency of the number
- for k items, we pop the elements from the heap and store it in an array

TC => O(n + m logk)
O(n) - looping through the elements in an array
O(m logk) - heapify the heap, where m is the number of unique elements in the array and k is the given size
O(k) - popping the elements from the heap

SC => O(m + k)
O(m) - storing the key, value pairs in a hashmap
O(k) - storing the k no of elements in an array

----------------------------------------------------------------------