1. Using heap
- if the length of the stones array is 0, return 0
- if the length of the stones array is 1, return the first element
- python's default heap is min heap
- to make it as max heap, negate the value
- form heap using heapq's heapify function
- while the length of the stones array is greater than 1
- continue the below process
- pop the two largest element from the heap
- if the two values are equal pop the next two largest element
- else, calculate the difference between the two large values
- add it to the heap by negating the difference value using heapq's heappush function
- heappush function accepts two arguments => [place, value]
- return the last element if length is 1 else return 0


TC => O(n * log k)
k = the number of stones in the heap
n = the number of stones in the input array

SC => O(n)
since we are using a heap, the space complexity is proportional to the number of stones in the heap which is at most n

----------------------------------------------------------------------